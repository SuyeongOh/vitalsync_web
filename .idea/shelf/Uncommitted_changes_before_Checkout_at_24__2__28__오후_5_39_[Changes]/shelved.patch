Index: server/vital/VitalService.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, Optional\r\nfrom fastapi import FastAPI, HTTPException, status\r\nfrom pydantic import BaseModel\r\nfrom pipeline_package import preprocess_pipeline, postprocess_pipeline\r\nfrom core import pos, omit\r\nfrom analysis.vital_calculator import VitalCalculator\r\nimport numpy as np\r\nfrom analysis.visualizer import *\r\nvitalService = FastAPI()\r\n\r\n\r\nclass VitalRequest(BaseModel):\r\n    RGB: List[List[float]]\r\n    id: Optional[str] = None\r\n\r\n\r\nclass VitalResponse(BaseModel):\r\n    hr: float = 0.0\r\n    hrv: float = 0.0\r\n    rr: float = 0.0\r\n    spo2: float = 0.0\r\n    stress: float = 0.0\r\n    bp: float = 0.0\r\n    sbp: float = 0.0\r\n    dbp: float = 0.0\r\n    status: int = 200\r\n    message: str = \"Success\"\r\n\r\n\r\n@vitalService.post(\"/vital/all\", response_model=VitalResponse)\r\ndef calculate_vital(vital_request: VitalRequest):\r\n    # 여기에서 데이터를 처리하고 결과를 계산하는 로직을 구현합니다.\r\n    # 예제를 위해 임의의 값을 반환하겠습니다.\r\n\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n\r\n    #여기다가 코드 구현해서 넣으면 된단다.\r\n    save_dict = {'save_root_path': '/home/najy/shared_innopia/test_results/20240228/',\r\n                 'name': \"test\",\r\n                 'model': 'POS', 'seq_num': 0, 'desc': 'Original RGB', 'show_flag': False,\r\n                 'figsize': (8, 9), 'fontsize': 10,\r\n                 'norm_flag': True, 'diff_flag': False}\r\n\r\n    # Calculate PPG\r\n    RGB = np.asarray(vital_request.RGB).transpose(1, 0)\r\n    rgb_plot(RGB, save_dict)\r\n\r\n    RGB = preprocess_pipeline.apply(RGB, save_dict)\r\n    save_dict['desc'] = 'Smoothed RGB'\r\n    save_dict['seq_num'] += 1\r\n    rgb_plot(RGB, save_dict)\r\n\r\n    pred_ppg = pos.POS(RGB, 30)\r\n    # pred_ppg = omit.OMIT(RGB)\r\n    save_dict['show_flag'] = True\r\n\r\n    pred_ppg = postprocess_pipeline.apply(pred_ppg, save_dict)\r\n    # Calculate Vital\r\n    vitalcalc = VitalCalculator(pred_ppg, 30, save_dict['model'], save_dict)\r\n    vitalcalc.visualize_ppg()\r\n    fft_hr = vitalcalc.calc_fft_hr()\r\n    ibi_hr = vitalcalc.calc_ibi_hr()\r\n    hrv = vitalcalc.calc_hrv()\r\n    print(f\"fft_hr: {fft_hr}, ibi_hr: {ibi_hr}, hrv: {hrv}\")\r\n\r\n    response = VitalResponse(\r\n        hr=fft_hr,\r\n        hrv=hrv,\r\n        rr=16.0,\r\n        spo2=98.5,\r\n        stress=14.3,\r\n        bp=120.75,\r\n        sbp=120.0,\r\n        dbp=80.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\n@vitalService.post(\"/vital/hr\", response_model=VitalResponse)\r\ndef calculate_hr(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n    hr = 0\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        hr=72.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\n@vitalService.post(\"/vital/hrv\", response_model=VitalResponse)\r\ndef calculate_hrv(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n    hrv = 0\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        hrv=50.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\n@vitalService.post(\"/vital/rr\", response_model=VitalResponse)\r\ndef calculate_rr(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n    rr = 0\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        rr=12.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\n@vitalService.post(\"/vital/spo2\", response_model=VitalResponse)\r\ndef calculate_spo2(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n    spo2 = 0\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        spo2=72.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\n@vitalService.post(\"/vital/stress\", response_model=VitalResponse)\r\ndef calculate_stress(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n    stress = 0\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        stress=72.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n@vitalService.post(\"/vital/bp\", response_model=VitalResponse)\r\ndef calculate_bp(vital_request: VitalRequest):\r\n    if not vital_request.RGB:\r\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid RGB data.\")\r\n\r\n    # 계산된 결과를 반환합니다. 실제 애플리케이션에서는 계산 로직에 따라 결과가 달라질 것입니다.\r\n\r\n    # 여기다가 코드 구현해서 넣으면 된단다.\r\n    response = VitalResponse(\r\n        bp=101.9,\r\n        sbp=133.0,\r\n        dbp=80.0,\r\n        status=200,\r\n        message=\"Success\"\r\n    )\r\n    return response\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(vitalService, host=\"0.0.0.0\", port=1024)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/vital/VitalService.py b/server/vital/VitalService.py
--- a/server/vital/VitalService.py	
+++ b/server/vital/VitalService.py	
@@ -53,8 +53,8 @@
     save_dict['seq_num'] += 1
     rgb_plot(RGB, save_dict)
 
-    pred_ppg = pos.POS(RGB, 30)
-    # pred_ppg = omit.OMIT(RGB)
+    # pred_ppg = pos.POS(RGB, 30)
+    pred_ppg = omit.OMIT(RGB)
     save_dict['show_flag'] = True
 
     pred_ppg = postprocess_pipeline.apply(pred_ppg, save_dict)
